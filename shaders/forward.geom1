#version 430 core

layout(triangles) in;

// type of output primitives and maximum number of new vertices
// each line requires two vertices
// vertex normal, tangent and bitangent for each vertex in triangle = 18
// three lines for edges = 4 (due to usage of line strip output primitive)
// one line for normal of the triangle = 2
layout(line_strip, max_vertices = 24) out;

///////////////////////////////////////////////////////////////////

// data from vertex shader for three vertices of the triangle
in vec3	normal[];
in vec4	vertexColor[];

// matrices
layout (std140, binding = 0)
uniform Matrices {
	mat4 projection;
	mat4 view;
};
uniform mat4 model;

// color to fragment shader
out vec4 o_color;

void main()
{
    const mat3 scale = mat3(model) * 0.1f;
    mat4 viewProjection = projection * view;

    // positions of each vertex of the triangle
    // shifted a bit along normal
    // so there won't be Z fighting when rendered over the mesh
    vec4 pos[3];
    pos[0] = viewProjection * vec4(gl_in[0].gl_Position.xyz, 1.0);
    pos[1] = viewProjection * vec4(gl_in[1].gl_Position.xyz, 1.0);
    pos[2] = viewProjection * vec4(gl_in[2].gl_Position.xyz, 1.0);

    // output normals, tangents and bitangents for each vertex of the triangle
    for(int i=0; i < gl_in.length(); i++)
    {
        // get position of the vertex
        vec3 P = gl_in[i].gl_Position.xyz;

        // create normal for vertex
        o_color = vertexColor[i];
        gl_Position = pos[i];
        EmitVertex();
        gl_Position = viewProjection * vec4(P + normal[i].xyz * scale, 1.0);
        EmitVertex();
        EndPrimitive();
    }

    // create edges for triangle
    o_color = vec4(0.0f, 1.0f, 0.0f, 0.0f);
    gl_Position = pos[0];
    EmitVertex();
    gl_Position = pos[1];
    EmitVertex();
    gl_Position = pos[2];
    EmitVertex();
    gl_Position = pos[0];
    EmitVertex();
    // end line strip after four added vertices, so we will get three lines
    EndPrimitive();

    // create normal for triangle
    o_color = vec4(0.0f, 1.0f, 0.0f, 0.0f);
    // form two vectors from triangle
    vec3 V0 = gl_in[0].gl_Position.xyz - gl_in[1].gl_Position.xyz;
    vec3 V1 = gl_in[2].gl_Position.xyz - gl_in[1].gl_Position.xyz;
    // calculate normal as perpendicular to two vectors of the triangle
    vec3 N = normalize(cross(V1, V0));
    // position as arithmetic average
    vec3 P = (gl_in[0].gl_Position.xyz + gl_in[1].gl_Position.xyz  + gl_in[2].gl_Position.xyz) / 3.0;
    gl_Position = viewProjection * vec4(P, 1.0);
    EmitVertex();
    gl_Position = viewProjection * vec4(P + N * scale, 1.0);
    EmitVertex();
    EndPrimitive();
}